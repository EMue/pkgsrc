--- kcontrol/Makefile.in.orig	Sun Nov 23 01:03:11 1997
+++ kcontrol/Makefile.in	Thu Dec 18 01:17:52 1997
@@ -307,7 +307,7 @@
 
 install-data-local: 
 	$(mkinstalldirs) $(kde_bindir)
-	$(INSTALL_PROGRAM) kcontrol $(kde_bindir)/kcontrol
+	$(INSTALL_SCRIPT) kcontrol $(kde_bindir)/kcontrol
 
 uninstall-local:
 	rm -f $(kde_bindir)/kcontrol
--- kcontrol/info/memory.cpp.orig	Thu Dec 18 00:43:43 1997
+++ kcontrol/info/memory.cpp	Thu Dec 18 00:47:50 1997
@@ -81,6 +81,8 @@
 #include "memory_sgi.cpp"
 #elif __FreeBSD__
 #include "memory_fbsd.cpp"
+#elif __NetBSD__
+#include "memory_nbsd.cpp"
 #else
 
 // Default for unsupported systems
--- kcontrol/info/processor.cpp.orig	Thu Dec 18 00:56:53 1997
+++ kcontrol/info/processor.cpp	Thu Dec 18 00:58:27 1997
@@ -13,6 +13,8 @@
 #include "processor_sgi.cpp"
 #elif __FreeBSD__
 #include "processor_fbsd.cpp"
+#elif __NetBSD__
+#include "processor_nbsd.cpp"
 #else
 
 // Default for unsupportet systems
--- /dev/null	Thu Dec 18 00:28:16 1997
+++ kcontrol/info/memory_nbsd.cpp	Thu Dec 18 00:53:11 1997
@@ -0,0 +1,25 @@
+#include <sys/types.h>
+#include <sys/param.h>
+#include <sys/sysctl.h>
+
+void KMemoryWidget::update()
+{
+  int mib[2],memory; size_t len;char blah[10];
+  
+  mib[0]=CTL_HW;mib[1]=HW_PHYSMEM;
+  len=sizeof(memory);
+  sysctl(mib,2,&memory,&len,NULL,0);
+  
+  snprintf(blah,10,"%d",memory);
+  // Numerical values
+  totalMem->setText(format(memory));
+  /*	To: questions@freebsd.org
+		Anyone have any ideas on how to calculate this */
+  freeMem->setText("Unknown");
+  sharedMem->setText(("Unknown"));
+  bufferMem->setText(("Unknown"));
+  /*	To count swap space, you'd need to -lkvm kcc, and make it suid root,
+		let's not do that */
+  swapMem->setText(("Unknown"));
+  freeSwapMem->setText(("Unknown"));
+}
--- /dev/null	Thu Dec 18 00:28:16 1997
+++ kcontrol/info/processor_nbsd.cpp	Thu Dec 18 01:00:48 1997
@@ -0,0 +1,55 @@
+#include <sys/types.h>
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#include <stdlib.h>
+
+/* stdio.h has NULL, but also a lot of extra cruft */
+#ifndef NULL
+#define NULL 0L
+#endif
+
+/* Again avoid the cruft in stdlib.h since malloc() isn't gonna change 
+   too often */
+/* void    *malloc __P((size_t)); */
+
+KProcessorWidget::KProcessorWidget(QWidget *parent, const char *name)
+  : KConfigWidget(parent, name)
+{
+  QString str;
+
+  /* Stuff for sysctl */
+  char *buf,*mhz,*cpustring;
+  int mib[2],machspeed;
+  size_t len;
+  /* */
+
+  cpustring=(char *)malloc(128);
+  lBox = new QListBox(this);
+  lBox->setGeometry(20,20,400,280);
+  lBox->setFont(QFont("Courier"));
+
+  mib[0] = CTL_HW;
+  mib[1] = HW_MODEL;
+  sysctl(mib,2,NULL,&len,NULL,0);
+  buf=(char*)malloc(len);
+  sysctl(mib,2,buf,&len,NULL,0);
+  /*	Get the CPU speed, heh, heh, undocumented sysctls rule
+		but I dunno if this works on 2.2 machines.	*/
+  mib[0] = CTL_MACHDEP; mib[1] = 107;
+  len=sizeof(machspeed);
+  sysctl(mib,2,&machspeed,&len,NULL,0);
+  /* Format the integer into correct xxx.xx MHz */
+  mhz=(char *)malloc(20);
+  snprintf(mhz,20,"%d.%02d",(machspeed+4999)/1000000,
+		   ((machspeed+4999)/10000)%100);
+  if (strcmp(mhz,"0.0")==0)
+ 	/* We dunno how fast it's running */
+ 	snprintf(cpustring,128,"%s, unknown speed",buf);
+  else
+	snprintf(cpustring,128,"%s running at %s MHz",buf,mhz);
+  /* Put everything in the listbox */
+  lBox->insertItem(buf);
+  /* Clean up after ourselves */
+  free(mhz); free(cpustring);
+}
+
