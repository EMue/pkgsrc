$NetBSD: patch-be,v 1.1 1999/08/03 20:30:41 bad Exp $

--- mit-pthreads/machdep/engine-m68000-netbsd.h.orig	Sun Oct 12 14:07:37 1997
+++ mit-pthreads/machdep/engine-m68000-netbsd.h	Wed Dec 22 16:32:38 1999
@@ -5,2 +5,5 @@
  *
+ * m68k work by Andy Finnell <andyf@vei.net> based off work by
+ *  David Leonard and Chris Provenzano.
+ *
  */
@@ -18,10 +21,10 @@
 
-#define SEMAPHORE_TEST_AND_SET(lock)    \
-({										\
-volatile long temp = SEMAPHORE_CLEAR;   \
-										\
-__asm__ volatile("tas (%2);	bpl 0f; movl #1,%0; 0:" \
-        :"=r" (temp)                    \
-        :"0" (temp),"r" (lock));        \
-temp;                                   \
+#define SEMAPHORE_TEST_AND_SET(lock)            \
+({                                              \
+        volatile long temp = SEMAPHORE_CLEAR;   \
+        __asm__ volatile(                       \
+          "tas %2; bpl 0f; movl #1,%0; 0:"      \
+          :"=r" (temp)                          \
+          :"0" (temp),"m" (*lock));             \
+        temp;                                   \
 })
@@ -50,2 +53,3 @@
     jmp_buf     		machdep_state;
+    char			machdep_fstate[92];
 };
@@ -58,2 +62,8 @@
 /*
+ * Some fd flag defines that are necessary to distinguish between posix
+ * behavior and bsd4.3 behavior.
+ */
+#define __FD_NONBLOCK 		O_NONBLOCK
+
+/*
  * Static machdep_pthread initialization values.
@@ -72,2 +82,22 @@
 
+
+#ifndef __machdep_stack_get
+#define __machdep_stack_get(x)      (x)->machdep_stack
+#endif
+#ifndef __machdep_stack_set
+#define __machdep_stack_set(x, y)   (x)->machdep_stack = y
+#endif
+#ifndef __machdep_stack_repl
+#define __machdep_stack_repl(x, y)                          \
+{                                                           \
+    if (stack = __machdep_stack_get(x)) {                   \
+        __machdep_stack_free(stack);                        \
+    }                                                       \
+    __machdep_stack_set(x, y);                              \
+}
+#endif
+
+void *  __machdep_stack_alloc       __P_((size_t));
+void    __machdep_stack_free        __P_((void *));
+    
 int machdep_save_state      __P_((void));
