$NetBSD: patch-az,v 1.7 2000/02/18 23:55:15 mycroft Exp $

--- src/unexelf.c.orig	Fri Dec  3 04:09:21 1999
+++ src/unexelf.c	Fri Feb 18 18:23:34 2000
@@ -478,6 +478,13 @@
 # endif
 # include <sys/exec_elf.h>
 
+#include <sys/param.h>
+
+/* NetBSD 1.4M has sane <elf.h> */
+
+#if !defined(__NetBSD_Version__) || __NetBSD_Version__ < 104130000
+# include <sys/exec_elf.h>
+
 # define PT_LOAD	Elf_pt_load
 # define SHT_SYMTAB	Elf_sht_symtab
 # define SHT_DYNSYM	Elf_sht_dynsym
@@ -490,6 +497,10 @@
 # define SHN_ABS	Elf_eshn_absolute
 # define SHN_COMMON	Elf_eshn_common
 
+#else
+# include <elf.h>
+#endif
+
 /*
  * The magic of picking the right size types is handled by the ELFSIZE
  * definition above.
@@ -504,9 +515,14 @@
 #  include <sys/exec_ecoff.h>
 #  define HDRR		struct ecoff_symhdr
 #  define pHDRR		HDRR *
-# endif
+# endif /* __alpha__ */
 #endif /* __NetBSD__ */
 
+# ifdef __mips__
+#  define SHT_MIPS_DEBUG	DT_MIPS_FLAGS
+#  define HDRR		struct Elf_Shdr
+# endif /* __mips__ */
+
 #ifdef __OpenBSD__
 # include <sys/exec_elf.h>
 #endif
@@ -530,6 +546,14 @@
 extern void fatal (char *, ...);
 #endif
 
+#if defined ( __sony_news) && defined (_SYSTYPE_SYSV)
+# define HAVE_MIPS_SBSS
+#endif
+
+#if defined (__mips__) && (defined(__NetBSD__) || defined(__OpenBSD__))
+# define HAVE_MIPS_SBSS
+#endif
+
 #ifndef ELF_BSS_SECTION_NAME
 #define ELF_BSS_SECTION_NAME ".bss"
 #endif
@@ -588,6 +612,47 @@
   return x - rem + y;
 }
 
+#if defined(__alpha__) || (defined ( __sony_news) && defined (_SYSTYPE_SYSV))
+/* We are using  ECOFF symbols embedded in ELF. */
+
+void
+relocate_ecoff_symhdr(symhdr, diff)
+    HDRR *symhdr;
+    ElfW(Word) diff;
+{
+  symhdr->cbLineOffset += diff;
+  symhdr->cbDnOffset   += diff;
+  symhdr->cbPdOffset   += diff;
+  symhdr->cbSymOffset  += diff;
+  symhdr->cbOptOffset  += diff;
+  symhdr->cbAuxOffset  += diff;
+  symhdr->cbSsOffset   += diff;
+  symhdr->cbSsExtOffset += diff;
+  symhdr->cbFdOffset   += diff;
+  symhdr->cbRfdOffset  += diff;
+  symhdr->cbExtOffset  += diff;
+}
+#endif /* __alpha__ or __sony_news and systype_sysv */
+
+#ifdef notyet
+void
+relocate_elf_proghdr(p, diff)
+    HDRR *symhdr;
+    Elfw(Word) diff;
+{
+	phdr->sh_name  += diff;
+	phdr->sh_type  += diff;
+	phdr->sh_flags += diff;
+	phdr->sh_addr  += diff;
+	phdr->sh_offset += diff;
+	phdr->sh_size  += diff;
+	phdr->sh_link  += diff;
+	phdr->sh_info  += diff;
+	phdr->sh_addralign += diff;
+	phdr->sh_entsize += diff;
+};
+#endif /* notyet */
+
 /* ****************************************************************
  * unexec
  *
@@ -829,6 +894,10 @@
   if (n < 0)
     fatal ("Couldn't find segment next to .bss in %s\n", old_name, 0);
 
+#ifdef HAVE_MIPS_SBSSxxx
+  bss_phdr_index = n;
+#endif
+
   /* Make sure that the size includes any padding before the old .bss
      section.  */
   NEW_PROGRAM_H (n).p_filesz = new_bss_addr - NEW_PROGRAM_H (n).p_vaddr;
@@ -908,6 +977,28 @@
 	     this section will be placed in exactly the same place. */
 	  NEW_SECTION_H (nn).sh_addralign = OLD_SECTION_H (nn).sh_addralign;
 	  NEW_SECTION_H (nn).sh_size = 0;
+
+#ifdef HAVE_MIPS_SBSSxxx
+	  /* On ELF mips,  the new data section replaces both .sbss and .bss
+	     (we have, after all, written to them.).  Adding new_data2_size
+	     to the sh_addr and sh_offset of sbss puts sbss at the end of
+	     the new data section. setting the size to zero makes it empty.
+	     But then, adding the new_data2_size to the bss address puts
+	     its start  beyond the end of the original bss. If the sbss size
+	     was bigger than a page,  the bss ends up not covered by the
+	     program header.  This breaks strip. Since both sbss and bss
+	     are zero-sized,  just use the same address and file offset for
+	     both, guaranteeing other tools will assign them to the same
+	     program section (asssuming no sections are loaded at higher
+	     offsets.)  */
+	  if (n == old_bss_index) {
+	    	 int new_sbss_bss_padding = NEW_SECTION_H(nn).sh_addr -
+		    NEW_SECTION_H(nn - 1).sh_addr;
+		printf("sbss to bss offset =0x%x\n", new_sbss_bss_padding);
+		NEW_SECTION_H(nn).sh_addr =NEW_SECTION_H(nn - 1).sh_addr;
+		NEW_SECTION_H(nn).sh_offset =NEW_SECTION_H(nn - 1).sh_offset;
+	  }
+#endif  /* HAVE_MIPS_SBSS */
 	}
       else
 	{
@@ -983,22 +1074,11 @@
 	  == 0)
 	{
 	  pHDRR symhdr = (pHDRR) (NEW_SECTION_H (nn).sh_offset + new_base);
-
-	  symhdr->cbLineOffset += new_data2_size;
-	  symhdr->cbDnOffset += new_data2_size;
-	  symhdr->cbPdOffset += new_data2_size;
-	  symhdr->cbSymOffset += new_data2_size;
-	  symhdr->cbOptOffset += new_data2_size;
-	  symhdr->cbAuxOffset += new_data2_size;
-	  symhdr->cbSsOffset += new_data2_size;
-	  symhdr->cbSsExtOffset += new_data2_size;
-	  symhdr->cbFdOffset += new_data2_size;
-	  symhdr->cbRfdOffset += new_data2_size;
-	  symhdr->cbExtOffset += new_data2_size;
+	  relocate_ecoff_symhdr(symhdr, new_data2_size);
 	}
 #endif /* __alpha__ */
 
-#if defined (__sony_news) && defined (_SYSTYPE_SYSV)
+#ifdef HAVE_MIPS_SBSS
       if (NEW_SECTION_H (nn).sh_type == SHT_MIPS_DEBUG && old_mdebug_index) 
         {
 	  int diff = NEW_SECTION_H(nn).sh_offset 
@@ -1007,20 +1087,17 @@
 
 	  if (diff)
 	    {
-	      phdr->cbLineOffset += diff;
-	      phdr->cbDnOffset   += diff;
-	      phdr->cbPdOffset   += diff;
-	      phdr->cbSymOffset  += diff;
-	      phdr->cbOptOffset  += diff;
-	      phdr->cbAuxOffset  += diff;
-	      phdr->cbSsOffset   += diff;
-	      phdr->cbSsExtOffset += diff;
-	      phdr->cbFdOffset   += diff;
-	      phdr->cbRfdOffset  += diff;
-	      phdr->cbExtOffset  += diff;
+#if defined ( __sony_news) && defined (_SYSTYPE_SYSV)
+	      relocate_ecoff_symhdr(phdr, diff);
+#else
+	      /* xxxBSD with  GNU binutils has .mdebug, but not ecoff(???)  */
+#ifdef DEBUG
+	      printf("Dont know how to relocate mdebug syms by %0x\n", diff);
+#endif
+#endif
 	    }
 	}
-#endif /* __sony_news && _SYSTYPE_SYSV */
+#endif /* HAVE_MIPS_SBSS */
 
 #if __sgi
       /* Adjust  the HDRR offsets in .mdebug and copy the 
