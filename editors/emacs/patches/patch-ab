--- ./configure.orig	Fri Aug 28 13:38:44 1998
+++ ./configure	Sun Aug 16 03:48:36 1998
@@ -759,6 +748,7 @@
       ns32k-*-netbsd*)	machine=ns32000 ;;
       sparc-*-netbsd*)	machine=sparc ;;
       vax-*-netbsd*)	machine=vax ;;
+      arm*-*-netbsd*)	machine=arm ;;
     esac
   ;;
 
--- /dev/null	Fri Aug 28 13:20:16 1998
+++ ./src/m/arm.h	Sun Aug 16 03:48:25 1998
@@ -0,0 +1,97 @@
+/* Machine description file for Acorn RISCiX machines.
+   Copyright (C) 1994 Free Software Foundation, Inc.
+
+This file is part of GNU Emacs.
+
+GNU Emacs is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Emacs is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Emacs; see the file COPYING.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+
+
+/* Define WORDS_BIG_ENDIAN iff lowest-numbered byte in a word
+   is the most significant byte.  */
+
+#undef WORDS_BIG_ENDIAN
+
+/* Define NO_ARG_ARRAY if you cannot take the address of the first of a
+ * group of arguments and treat it as an array of the arguments.  We can't
+ * do this on the arm with gcc, since the first 4 args are in registers.  */
+
+#ifdef __GNUC__
+#define NO_ARG_ARRAY
+#else
+#undef NO_ARG_ARRAY
+#endif
+
+/* Define WORD_MACHINE if addresses and such have
+ * to be corrected before they can be used as byte counts.  */
+
+#undef WORD_MACHINE
+
+/* Define how to take a char and sign-extend into an int.
+   On machines where char is signed, this is a no-op.  */
+
+/* ARM note - The RISCiX Norcroft C Compiler has ALL
+   non-32-bit types as unsigned */
+
+#define SIGN_EXTEND_CHAR(c) (((int)(c) << 24) >> 24)
+
+/* Now define a symbol for the cpu type, if your compiler
+   does not define it automatically:
+   Ones defined so far include vax, m68000, ns16000, pyramid,
+   orion, tahoe, APOLLO and many others */
+
+/* ARM note - this is done by the Norcroft compiler - symbol is `__arm' */
+
+/* Use type int rather than a union, to represent Lisp_Object */
+/* This is desirable for most machines.  */
+
+#define NO_UNION_TYPE
+
+/* Define EXPLICIT_SIGN_EXTEND if XINT must explicitly sign-extend
+   the 24-bit bit field into an int.  In other words, if bit fields
+   are always unsigned.
+
+   If you use NO_UNION_TYPE, this flag does not matter.  */
+
+#define EXPLICIT_SIGN_EXTEND
+
+/* Define CANNOT_DUMP on machines where unexec does not work.
+   Then the function dump-emacs will not be defined
+   and temacs will do (load "loadup") automatically unless told otherwise.  */
+
+#undef CANNOT_DUMP
+
+#ifdef __GNUC__
+
+/* Use builtin alloca. Also be sure that no other ones are tried out. */
+#define alloca __builtin_alloca
+#define HAVE_ALLOCA
+
+#else
+#define C_ALLOCA
+#undef HAVE_ALLOCA
+#endif  /* __GNUC__ */
+
+/* Define NO_REMAP if memory segmentation makes it not work well
+   to change the boundary between the text section and data section
+   when Emacs is dumped.  If you define this, the preloaded Lisp
+   code will not be sharable; but that's better than failing completely.  */
+
+#define NO_REMAP
+
+
+/* For the portable alloca */
+#define STACK_DIRECTION -1
